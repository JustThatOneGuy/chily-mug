Write-up for PA3
----------------

We handled errors by exploiting the fact that we knew what our non-terminals
must end in; a class, even when incorrect, must end in '};', a bad expression
in a block must end in ';', etc.

For our test cases, good.cl tries to make an instance of every expression that
exists in the Cool language, as well as some possibly-ambiguous syntax such as
'let x:T in x + 1'. bad.cl has the provided cases as well as bad class features,
bad expressions in a block, and bad bindings in a let expression.

How we did 'let':

Consider a let expression such as:
    
    let x: T, y: T, z: T in 3

There is a recursive structure here. To make things clearer, 
let's ignore the word 'let':

    x: T, y: T, z: T in 3

Let's call this 'LET'-less expression a 'let_expr', which is what
we call it in the code. A let_expr is either:

    Rule 1. Some binding followed by 'IN' and then a body, or
    Rule 2. Some binding followed by 'COMMA' and then another let_expr.

This structure is easily expressed as a parser rule. A neat result is
that the AST for a multi-binding let such as:
    
    let x: Int <- 1, y: Int <- 2, z: Int <- 3 in 4

becomes: (more or less)

    LET-EXPR {
        name: "x",
        type: "Int",
        init: "1",
        body: LET-EXPR {
            name: "y",
            type: "Int",
            init: "2",
            body: LET-EXPR {
                name: "z",
                type: "Int",
                init: "3",
                body: "4"
            }
        }
    }

To achieve this tail-recursive body, make the trailing let_expr matched in rule (2)
(described above) be the body of the let_expr you're currently parsing.