
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CoolParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TokenConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\010" +
    "\000\002\004\012\000\002\006\002\000\002\006\003\000" +
    "\002\007\003\000\002\007\004\000\002\005\006\000\002" +
    "\005\012\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\004\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\004\000\002\010" +
    "\004\000\002\010\005\000\002\010\006\000\002\010\012" +
    "\000\002\010\011\000\002\011\004\000\002\011\005\000" +
    "\002\012\003\000\002\012\005\000\002\013\004\000\002" +
    "\013\005\000\002\014\003\000\002\014\005\000\002\015" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\003\006\004\010\001\002\000\006\002" +
    "\001\004\010\001\002\000\004\002\143\001\002\000\004" +
    "\002\uffff\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\004\055\011\001\002\000\006\011\013\050\012\001\002" +
    "\000\006\051\ufffa\056\017\001\002\000\004\055\014\001" +
    "\002\000\004\050\015\001\002\000\006\051\ufffa\056\017" +
    "\001\002\000\006\051\ufff8\056\ufff8\001\002\000\006\044" +
    "\025\045\027\001\002\000\004\051\023\001\002\000\006" +
    "\051\ufff9\056\017\001\002\000\006\051\ufff7\056\ufff7\001" +
    "\002\000\004\043\024\001\002\000\006\002\ufffb\004\ufffb" +
    "\001\002\000\004\055\136\001\002\000\004\044\041\001" +
    "\002\000\006\046\030\056\032\001\002\000\004\044\uffdc" +
    "\001\002\000\006\042\036\046\037\001\002\000\004\044" +
    "\034\001\002\000\006\042\uffda\046\uffda\001\002\000\004" +
    "\055\035\001\002\000\006\042\uffd8\046\uffd8\001\002\000" +
    "\004\056\032\001\002\000\004\044\uffdb\001\002\000\006" +
    "\042\uffd9\046\uffd9\001\002\000\004\055\042\001\002\000" +
    "\004\050\043\001\002\000\026\007\050\012\055\024\045" +
    "\027\053\041\054\045\056\052\046\053\044\054\047\056" +
    "\051\001\002\000\040\005\uffea\006\uffea\010\uffea\016\uffea" +
    "\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\042\uffea\046\uffea\051\uffea\001\002\000\004" +
    "\055\135\001\002\000\040\005\uffe9\006\uffe9\010\uffe9\016" +
    "\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\042\uffe9\046\uffe9\051\uffe9\001\002\000" +
    "\040\005\uffe8\006\uffe8\010\uffe8\016\uffe8\030\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042" +
    "\uffe8\046\uffe8\051\uffe8\001\002\000\026\007\050\012\055" +
    "\024\045\027\053\041\054\045\056\052\046\053\044\054" +
    "\047\056\051\001\002\000\044\005\uffe7\006\uffe7\010\uffe7" +
    "\016\uffe7\026\125\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\045\075\046\uffe7" +
    "\051\uffe7\001\002\000\024\030\064\032\062\033\066\034" +
    "\060\035\061\036\063\037\070\040\065\051\122\001\002" +
    "\000\026\007\050\012\055\024\045\027\053\041\054\045" +
    "\056\052\046\053\044\054\047\056\051\001\002\000\026" +
    "\007\050\012\055\024\045\027\053\041\054\045\056\052" +
    "\046\053\044\054\047\056\051\001\002\000\004\056\111" +
    "\001\002\000\026\007\050\012\055\024\045\027\053\041" +
    "\054\045\056\052\046\053\044\054\047\056\051\001\002" +
    "\000\024\030\064\032\062\033\066\034\060\035\061\036" +
    "\063\037\070\040\065\046\067\001\002\000\026\007\050" +
    "\012\055\024\045\027\053\041\054\045\056\052\046\053" +
    "\044\054\047\056\051\001\002\000\026\007\050\012\055" +
    "\024\045\027\053\041\054\045\056\052\046\053\044\054" +
    "\047\056\051\001\002\000\026\007\050\012\055\024\045" +
    "\027\053\041\054\045\056\052\046\053\044\054\047\056" +
    "\051\001\002\000\026\007\050\012\055\024\045\027\053" +
    "\041\054\045\056\052\046\053\044\054\047\056\051\001" +
    "\002\000\026\007\050\012\055\024\045\027\053\041\054" +
    "\045\056\052\046\053\044\054\047\056\051\001\002\000" +
    "\004\056\073\001\002\000\026\007\050\012\055\024\045" +
    "\027\053\041\054\045\056\052\046\053\044\054\047\056" +
    "\051\001\002\000\040\005\uffeb\006\uffeb\010\uffeb\016\uffeb" +
    "\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\046\uffeb\051\uffeb\001\002\000\026" +
    "\007\050\012\055\024\045\027\053\041\054\045\056\052" +
    "\046\053\044\054\047\056\051\001\002\000\040\005\uffef" +
    "\006\uffef\010\uffef\016\uffef\030\064\032\062\033\066\034" +
    "\060\035\061\036\063\037\070\040\065\042\uffef\046\uffef" +
    "\051\uffef\001\002\000\040\005\ufff1\006\ufff1\010\ufff1\016" +
    "\ufff1\030\064\032\062\033\066\034\060\035\061\036\063" +
    "\037\070\040\065\042\ufff1\046\ufff1\051\ufff1\001\002\000" +
    "\004\045\075\001\002\000\040\005\uffe3\006\uffe3\010\uffe3" +
    "\016\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\042\uffe3\046\uffe3\051\uffe3\001\002" +
    "\000\030\007\050\012\055\024\045\027\053\041\054\045" +
    "\056\046\076\052\046\053\044\054\047\056\051\001\002" +
    "\000\040\005\uffe0\006\uffe0\010\uffe0\016\uffe0\030\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\042\uffe0\046\uffe0\051\uffe0\001\002\000\006\042\101\046" +
    "\102\001\002\000\026\030\064\032\062\033\066\034\060" +
    "\035\061\036\063\037\070\040\065\042\uffde\046\uffde\001" +
    "\002\000\026\007\050\012\055\024\045\027\053\041\054" +
    "\045\056\052\046\053\044\054\047\056\051\001\002\000" +
    "\040\005\uffdf\006\uffdf\010\uffdf\016\uffdf\030\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042" +
    "\uffdf\046\uffdf\051\uffdf\001\002\000\026\030\064\032\062" +
    "\033\066\034\060\035\061\036\063\037\070\040\065\042" +
    "\uffdd\046\uffdd\001\002\000\040\005\uffed\006\uffed\010\uffed" +
    "\016\uffed\030\064\032\062\033\066\034\060\035\061\036" +
    "\063\037\070\040\065\042\uffed\046\uffed\051\uffed\001\002" +
    "\000\040\005\uffee\006\uffee\010\uffee\016\uffee\030\064\032" +
    "\062\033\066\034\060\035\061\036\063\037\070\040\065" +
    "\042\uffee\046\uffee\051\uffee\001\002\000\040\005\ufff4\006" +
    "\ufff4\010\ufff4\016\ufff4\030\064\032\062\033\066\034\060" +
    "\035\061\036\063\037\070\040\065\042\ufff4\046\ufff4\051" +
    "\ufff4\001\002\000\040\005\ufff2\006\ufff2\010\ufff2\016\ufff2" +
    "\030\064\032\062\033\066\034\060\035\061\036\063\037" +
    "\070\040\065\042\ufff2\046\ufff2\051\ufff2\001\002\000\040" +
    "\005\ufff3\006\ufff3\010\ufff3\016\ufff3\030\064\032\062\033" +
    "\066\034\060\035\061\036\063\037\070\040\065\042\ufff3" +
    "\046\ufff3\051\ufff3\001\002\000\004\044\112\001\002\000" +
    "\004\055\113\001\002\000\004\026\114\001\002\000\026" +
    "\007\050\012\055\024\045\027\053\041\054\045\056\052" +
    "\046\053\044\054\047\056\051\001\002\000\024\010\116" +
    "\030\064\032\062\033\066\034\060\035\061\036\063\037" +
    "\070\040\065\001\002\000\026\007\050\012\055\024\045" +
    "\027\053\041\054\045\056\052\046\053\044\054\047\056" +
    "\051\001\002\000\040\005\uffe2\006\uffe2\010\uffe2\016\uffe2" +
    "\030\064\032\062\033\066\034\060\035\061\036\063\037" +
    "\070\040\065\042\uffe2\046\uffe2\051\uffe2\001\002\000\040" +
    "\005\ufff0\006\ufff0\010\ufff0\016\ufff0\030\064\032\062\033" +
    "\066\034\060\035\061\036\063\037\070\040\065\042\ufff0" +
    "\046\ufff0\051\ufff0\001\002\000\040\005\uffec\006\uffec\010" +
    "\uffec\016\uffec\030\064\032\062\033\066\034\060\035\061" +
    "\036\063\037\070\040\065\042\uffec\046\uffec\051\uffec\001" +
    "\002\000\004\043\123\001\002\000\006\051\ufff5\056\ufff5" +
    "\001\002\000\040\005\uffe6\006\uffe6\010\uffe6\016\uffe6\030" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\042\uffe6\046\uffe6\051\uffe6\001\002\000\026\007" +
    "\050\012\055\024\045\027\053\041\054\045\056\052\046" +
    "\053\044\054\047\056\051\001\002\000\040\005\uffe4\006" +
    "\uffe4\010\uffe4\016\uffe4\030\064\032\062\033\066\034\060" +
    "\035\061\036\063\037\070\040\065\042\uffe4\046\uffe4\051" +
    "\uffe4\001\002\000\024\016\130\030\064\032\062\033\066" +
    "\034\060\035\061\036\063\037\070\040\065\001\002\000" +
    "\026\007\050\012\055\024\045\027\053\041\054\045\056" +
    "\052\046\053\044\054\047\056\051\001\002\000\024\005" +
    "\132\030\064\032\062\033\066\034\060\035\061\036\063" +
    "\037\070\040\065\001\002\000\026\007\050\012\055\024" +
    "\045\027\053\041\054\045\056\052\046\053\044\054\047" +
    "\056\051\001\002\000\024\006\134\030\064\032\062\033" +
    "\066\034\060\035\061\036\063\037\070\040\065\001\002" +
    "\000\040\005\uffe1\006\uffe1\010\uffe1\016\uffe1\030\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\042\uffe1\046\uffe1\051\uffe1\001\002\000\040\005\uffe5\006" +
    "\uffe5\010\uffe5\016\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\046\uffe5\051" +
    "\uffe5\001\002\000\004\043\137\001\002\000\006\051\ufff6" +
    "\056\ufff6\001\002\000\004\051\141\001\002\000\004\043" +
    "\142\001\002\000\006\002\ufffc\004\ufffc\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffd\004\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\010\002\004\003\003\004\006\001\001\000" +
    "\004\004\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\015\006\137\007\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\015\006\017\007\020\001" +
    "\001\000\002\001\001\000\004\013\025\001\001\000\002" +
    "\001\001\000\004\005\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\030\015\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\126\001\001\000\004\011\123\001\001\000" +
    "\002\001\001\000\004\010\120\001\001\000\004\010\117" +
    "\001\001\000\002\001\001\000\004\010\056\001\001\000" +
    "\002\001\001\000\004\010\107\001\001\000\004\010\106" +
    "\001\001\000\004\010\105\001\001\000\004\010\104\001" +
    "\001\000\004\010\103\001\001\000\002\001\001\000\004" +
    "\010\071\001\001\000\002\001\001\000\004\010\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\073" +
    "\001\001\000\002\001\001\000\006\010\077\012\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\114\001\001" +
    "\000\002\001\001\000\004\010\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\130" +
    "\001\001\000\002\001\001\000\004\010\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }


  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action_part00000000(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              programc RESULT =null;
		 RESULT = new programc(curr_lineno(),
                                     new Classes(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_cc 
            {
              Classes RESULT =null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= class_list class_cc 
            {
              Classes RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_cc ::= CLASS TYPEID LBRACE optional_feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                    AbstractTable.idtable.addString("Object"), 
				    f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_cc",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_cc ::= CLASS TYPEID INHERITS TYPEID LBRACE optional_feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_cc",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optional_feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("optional_feature_list",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optional_feature_list ::= feature_list 
            {
              Features RESULT =null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("optional_feature_list",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature_list ::= feature 
            {
              Features RESULT =null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature_list ::= feature_list feature 
            {
              Features RESULT =null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), name, type, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= OBJECTID formals COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		Formals formals = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), name, formals, type, e);  
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new neg(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new lt(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new eq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new leq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new comp(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(), i); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(), b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new object(curr_lineno(), o); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= OBJECTID actuals 
            {
              Expression RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expressions a = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new dispatch(curr_lineno(),
	                             new object(curr_lineno(), 
	                                        AbstractTable.idtable.addString("self")),
				     n, a); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new new_(curr_lineno(), t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new assign(curr_lineno(), name, value); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr DOT OBJECTID actuals 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol method = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new static_dispatch(curr_lineno(), e, null, method, args); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= LET OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), name, type, e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(), e1, e2, e3); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // actuals ::= LPAREN RPAREN 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("actuals",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // actuals ::= LPAREN exp_list RPAREN 
            {
              Expressions RESULT =null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = el; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("actuals",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_list ::= expr 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exp_list",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_list ::= exp_list COMMA expr 
            {
              Expressions RESULT =null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exp_list",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formals ::= LPAREN RPAREN 
            {
              Formals RESULT =null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // formals ::= LPAREN formals_list RPAREN 
            {
              Formals RESULT =null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = fl; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // formals_list ::= form 
            {
              Formals RESULT =null;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals_list",10, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formals_list ::= formals_list COMMA form 
            {
              Formals RESULT =null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals_list",10, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // form ::= OBJECTID COLON TYPEID 
            {
              Formal RESULT =null;
		AbstractSymbol arg = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new formalc(curr_lineno(), arg, type); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("form",11, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CoolParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
              return CUP$CoolParser$do_action_part00000000(
                               CUP$CoolParser$act_num,
                               CUP$CoolParser$parser,
                               CUP$CoolParser$stack,
                               CUP$CoolParser$top);
    }
}

}
